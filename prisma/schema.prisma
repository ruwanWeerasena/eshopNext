// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Customer {

  id        Int    @id @default(autoincrement())
  email     String @unique
  firstname String
  lastname  String
  password  String
  cartDetails CartDetails[]
  orders     Orders[]
}

model Brand {

  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {

  id                Int     @id @default(autoincrement())
  name              String  @unique
  description       String
  price             Decimal
  pictureFileName   String
  pictureUri        String  @default("http://localhost:3000/images/")
  brand             Brand   @relation(fields: [brandId], references: [id])
  brandId           Int
  availableStock    Int
  restockThreshold  Int     @default(50)
  maxStockThreshold Int     @default(100)
  onRecorder        Int     @default(1)
  cartDetails       CartDetails[]
  orderDetails      OrderDetails[]
}

model CartDetails {

  id  Int     @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  @@unique([productId, customerId], name: "cartidentifier")

}


model Orders {

  id              Int     @id @default(autoincrement())
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      Int
  orderDate       DateTime @default(now())
  streetAddress   String
  city            String
  state           String
  paymentMethod   String
  total           Decimal
  orderdetails    OrderDetails[]
}

model OrderDetails {

  id              Int     @id @default(autoincrement())
  order           Orders  @relation(fields: [orderId], references: [id])
  orderId         Int
  product         Product @relation(fields: [productId], references: [id])
  productId       Int
  quantity        Int
  price           Decimal
 
}